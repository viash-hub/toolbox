name: yq
description: A portable YAML, JSON, XML, CSV, TOML and properties processor
keywords: [ yaml, json, xml, csv, toml, properties ]
links:
  homepage: https://mikefarah.gitbook.io/yq
  documentation: https://mikefarah.gitbook.io/yq/
  repository: https://github.com/mikefarah/yq
license: MIT
requirements:
  commands: [ yq ]
argument_groups:
  - name: Inputs
    arguments:
      - name: --input
        type: file
        direction: input
        description: files to be processed
        required: true
        example: input.yaml
  - name: Outputs
    arguments:
      - name: --output
        type: file
        direction: output
        description: output file
        required: true
        example: output.yaml
  - name: Arguments
    arguments:
      - name: --eval
        type: string
        description: expression to evaluate
        required: true
        example: '.name = "foo"'
      - name: --indent
        type: integer
        description: sets indent level for output (default 2)
        alternatives: -I
      - name: --input_format
        type: string
        description: 'parse format for input. (default "auto")'
        alternatives: -p
        choices: [ auto, a, yaml, "y", json, j, props, p, csv, c, tsv, t, xml, x, base64, uri, toml, shell, s, lua, l ]
      - name: --output_format
        type: string
        description: 'output format type. (default "auto")'
        alternatives: -o
        choices: [ auto, a, yaml, "y", json, j, props, p, csv, c, tsv, t, xml, x, base64, uri, toml, shell, s, lua, l ]
      - name: --pretty_print
        type: boolean_true
        description: pretty print, shorthand for '... style = ""'
        alternatives: -P

resources:
  - type: bash_script
    text: |
      #!/bin/sh
      [[ "$par_pretty_print" == "false" ]] && unset par_pretty_print
      yq eval \
        ${par_indent:+-I "${par_indent}"} \
        ${par_input_format:+-p "${par_input_format}"} \
        ${par_output_format:+-o "${par_output_format}"} \
        ${par_pretty_print:+-P} \
        --expression "$par_eval" \
        --no-colors \
        "$par_input" > "$par_output"
test_resources:
  - type: bash_script
    text: |
      set -e
      echo "name: 'bar'" > test.yaml
      "$meta_executable" --input test.yaml --output output.yaml --eval '.name = "foo"'
      "$meta_executable" --input output.yaml --output output2.yaml --eval '.name'
      grep "^foo$" output2.yaml

engines:
  - type: docker
    image: alpine:latest
    setup:
      - type: apk
        packages: [bash, yq-go]
      - type: docker
        run: |
          /usr/bin/yq --version | sed 's/.*version\sv\(.*\)/yq: "\1"/' > /var/software_versions.txt
runners:
  - type: executable
  - type: nextflow
