name: yq
description: a lightweight and portable command-line YAML processor
keywords: [ yaml ]
links:
  homepage: https://github.com/mikefarah/yq
  documentation: https://mikefarah.gitbook.io/yq/
  repository: https://github.com/mikefarah/yq
license: MIT
requirements:
  commands: [ yq ]
argument_groups:
  - name: Inputs
    arguments:
      - name: --input
        type: file
        direction: input
        description: files to be processed
        required: true
  - name: Outputs
    arguments:
      - name: --output
        type: file
        direction: output
        description: output file
        required: true
  - name: Arguments
    arguments:
      - name: --eval
        type: string
        description: expression to evaluate
        required: true
      - name: --indent
        type: integer
        description: sets indent level for output (default 2)
        alternatives: -I
      - name: --input_format
        type: string
        description: '[auto|a|yaml|y|json|j|props|p|csv|c|tsv|t|xml|x|base64|uri|toml|shell|s|lua|l] parse format for input. (default "auto")'
        alternatives: -p
      - name: --output_format
        type: string
        description: '[auto|a|yaml|y|json|j|props|p|csv|c|tsv|t|xml|x|base64|uri|toml|shell|s|lua|l] output format type. (default "auto")'
        alternatives: -o
      - name: --pretty_print
        type: boolean_true
        description: pretty print, shorthand for '... style = ""'
        alternatives: -P

resources:
  - type: bash_script
    text: |
      #!/bin/sh
      [[ "$par_pretty_print" == "false" ]] && unset par_pretty_print
      yq eval \
      ${par_indent:+-I "${par_indent}"} \
      ${par_input_format:+-p "${par_input_format}"} \
      ${par_output_format:+-o "${par_output_format}"} \
      ${par_pretty_print:+-P} \
      --expression "$par_eval" \
      --no-colors \
      "$par_input" > "$par_output"
test_resources:
  - type: bash_script
    text: |
      set -e
      "$meta_executable" --input .config.vsh.yaml --output .config.vsh.yaml.out --eval '.name = "foo"'
      grep 'name: "foo"' .config.vsh.yaml.out

engines:
  - type: docker
    image: alpine:latest
    setup:
      - type: apk
        packages: [bash, yq-go]
      - type: docker
        run: |
          /usr/bin/yq --version | sed 's/.*version\sv\(.*\)/yq: "\1"/' > /var/software_versions.txt
runners:
  - type: executable
  - type: nextflow
